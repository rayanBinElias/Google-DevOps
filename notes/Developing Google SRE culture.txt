Module 1: Developing a Google SRE culture

  Learning Objectives
    - Define Site Reliability Engineering

  What is Site Reliability Engineering (SRE)?
    - a practice and a job role, where engineering directly supports software operations.
    - design an operations team
  
  Quiz
    1. What is Site Reliability Engineering (SRE)?
      - Practices that balance the velocity of development features with the risk to reliability.

  KeyPoints and Reflection Activity
    Key KeyPoints
      - Customer's experience w/ your service tell you how reliable it is
      - in it org, dev and op teams have conflicting priorities
      - SRE is the practice of balancing velocity of development features w/ the risk to reliability
      - SRE can benefit IT teams, rergardles of whether they are using cloud or on-premise tech, for both large projects and daily work
  
Module 2: DevOps, SRE, and Why they exist
  This module explains the components of DevOps philosophy, 
  why Site Reliability Engineering came to exist, 
  and who in an organization can and should practice SRE.

  Learning Objectives
    - DevOps movement
    - Origin of SRE
    - WHo practices SRE
    - Distinguish between DevOps and SRE
    - Articulate the pillars of DevOps
    - Explain how SRE practices align to DevOps pillars

    DevOps and SRE
      Origin of SRE 
        - how to think about, measure, and incentivize reliability
        - shared standard comm between business and IT
        - 2003 by Benjamin Treynor Sloss
        - is a concrete way to solve problems that the DevOps philosophy addresses
        - a practice and a role
        - goal of SRE is to serve the business and the user, not the other way round.

      DevOps movement
        - strives to align principles, practices and incentives across dev and operations teams
        - aims to close the gap between software development and software operations
        
        Why it exists?
          - a culture/philosphy and not practices bet dev and Operators
            - culture means sustain

          Developers
            - responsible for writing code for systems
            - expected to be agile and often pushed to write and deploy new code as quickly as possible
            - want to work faster, innovating, and succeding or failing quickly

          Operators
            - responsible for ensuring that those sys operate reliably so customers are happy
            - expected to keep sys stable would prefer to work slower
            - focusing on reliability and consistency

        5 pillars of DevOps
          1. Reduce Organization Silos
            - increase collaboration by breaking down barriers across teams
            - SRE
              - Share Ownership

          2. Accept failure is normal
            - computers are inherently unreliable and human error
             - SRE
              - Blamelessness
                - Implement blameless postmortems.

          3. Implement Gradual Change
            - small incremental changes are easier to review
            - allows you to reduce the time to recover making it simple to roll back
            - SRE
              - Reduce cost of failure
                - Design thinking
              
          4. Leverage tooling and automation
            - key to helping your IT team work efficiently and focus on the tasks that matter
            - automate manual nonvolatile work
            - SRE
              - Toil automation

          5. Measure everything
            - critical gauge for success.
            - SRE
              - Measure toil and reliability

    Quiz
      1. Which philosophy closes the gap between development and operations?
        - DevOps

      2. How do DevOps and SRE relate to each other?
        - SRE is a way to implement DevOps. 

      3. Which is a key pillar of DevOps philosophy?
        - Accept failure as normal.

      4. Which is an SRE practice that promotes sharing ownership in IT?
        - Error budgets 
          - created shared incentive and ownership between developers and SREs.


    Exercise
      Key KeyPoints
        ● DevOps emerged to help close gaps and break down silos between
development and operations teams.
        ● DevOps is a philosophy, not a development methodology or
        technology.
        ● SRE is a practical way to implement DevOps philosophy.
        ● Developers focus on feature velocity and innovation; operators focus
        on reliability and consistency.
        ● SRE consists of both technical and cultural practices.


Module 3: SLOs with Consequences
  - This module covers the value of SRE to an organization, 
  as well as the technical and cultural fundamentals related to reducing organizational silos and accepting failure as normal. \
  Topics include the SRE technical practices of blameless postmortems,...

  Learning Objectives
    - Understand the value SRE can provide to an organization.
    - Describe the technical fundamentals of SRE: SLOs, error budgets, and blameless postmortems.
    - Describe the cultural fundamentals of SRE: Blamelessness, psychological safety, unified vision, collaboration and communication, and knowledge sharing.

  SRE value
    Mission
      - to protect, provide for and progress software and systems w/ consitent focus
      of availability, latency, performance and capacity

    Practices/Norms
      1. Incentivize automation w/ time for creativity
        - lessen human error and more time for other creative projects

      2. Launching and iterating allows teams to fail fast
        - learn from failure and try again

    Note
      - need cultural and org support for long term to be successful
 
  Blameless Postmortems/Retrospective
    - only focuses on the root causes of an incident.
    - incident is looked at objectively w/o designing a person or team as the root cause
    Exprerienced SREs 
      - are comfortable w/ failure
      - eliminate ambiguity w/ monitoring
      - establish and document processes.

    Components of a postmortem
      - details of the incident and its timeline
      - the actions taken to mitifate or resolve the incident
      - the incident's impact
      - Its trigger and root cause or causes
      - the follow-up actions to prevent its recurrence

    Goals
      - ensure that all the root casues are properly understood by the team
      - define or take effective actions to prevent the issue from occuring again
      - reduce the likelihood of stressful outages
      - avoid multiplying complexity
      - learn from your mistakes and thos of others
      - writing RCA provides additional vlue to your org
      - blamessness increase effectiveness of teams so 
      they can 100% focused on preventing from occuring instead of worrying about being blamed if something goes wrong

    RCA
      - root cause analysis
      - 5 whys minimum to find the culprit

  Blamelessness and Psych Safety
    Psychological safety
      - the belief that a person will not be punished or humiliated for speaking up 
      w/ ideas, questions, concerns, or mistakes

      Signs of low psychological safety
        - people  keep concerns or ideas to themselves
        - people are afraid of looking incompetent or ignorant

        Effect
          1. Prevents team members of small moments of learning
          2. Asking questions is key to brainstorming for leading to an out of the box or simple idea to solve the incident
          3. stifled learning and innovation

      How to build high psych safety?
        1. Frame work as a learning problem and not an execution problem
        2. Acknowledge your own fallibility
        3. Model curiosity

        Effects
          - bridging is encouraged
          - high cooperation
          - messengers are not punished when delivering bad news
          - failure is treated as opportunity for improvement
          - new ideas are welcomed
            - lead time,deployment frequency and time to restore
   
    Blamessness
      - fosters psych safety 

      Why do people blame?
        1. Hindsight Bias
          - is the tendency of people to overestimate their ability to have predicted an unpredictable outcome
          - can lead to blaming the person in charge

          Sample
            - Insisting that you knew that the losing team was goin to lose because you originally said you predicted it
        
        2. Discomfort discahrge
          - is when people blame others to discharge discomfort and pain at a neurobiological level

      How to not blame?
        1. Assume good intentions.
        2. Focus on systems and processesm not people
        3. Innovation requires ome degree of risk taking

  SLOs and error budgets
    - reduces org silos w/ SLOs and error budgets

    Notes
      - Software Engineering focuses on desgining and building
      - operating and maintaing estimated that 40-90% of total cost of ownership

    Shared responsibility
      Reliability/Availability (simple approach)
        - equals your service 'good' time divided by it's total time
        
        Advanced approach
        - equals to good interactions divided by total interactions

        Service reliability 
          - is about determining the amount of reliability you are trying to reach
          and the amount of downtime you are willing to tolerate.


      1. Error budgets
        - amount of downtime you are willing to tolerate
        - creates a common incentive for dev and SREs to find the right balance bet innovation and reliability


      2. Service-level objectives(SLOs)
        - precise numerical target for system reliability
        - targets that are agreed upon between stakeholders 
        - SLIs aggregated over time
        - short of 100%
          - 99.9
        - a promise about the health of your service to your customers

        How do you define SLOs?
          - Service-level indicators(SLIs)
            - measurable that answers
              - how well your service is doing at any moment in time?
            - expresed as a ratio of good events to valid events times 100%
            - map to user expecations
              - latency
              - throughput
              
  Share vision and knowledge  
    How to create SRE culture?
      1. Create a unified vision
        - team vision statement
        - support the company's vision
          - give sense of direction
        - drives' its work and includes
          - values
            - refers to how you can achieve your vision
            - guides your behaviors
            - response to others
            - commitment to Goals
            - way you spend your time
            - way you operate as a team

            Core values help teams to:
              - build trust psch safety w/ each other
              - be more willing to take risks
              - more open to learning and growing
              - feel a greater sense of inclusion and commitment

          - purpose
            - explains why your team exists
            - improves life and work satisfaction
            - creates stronger connections
            - helps reduce conflict

          - mission
            - a clear and compelling goal the team wants to achieve.

            Sample:
              - Google Mission
                - To organize the world's information and make it universally accessible and useful

          - strategy
            - how it'll realize its mission
            - can be a single initiative
            - can be leveraged
            - requires change
        
            Strategy building blocks
              - look outside: to identify threats and opportunities
              - look inside:to understand resource, capabilities and practices
              - consider strategies for addressing threats and opportunities
              - create alignment on communicating and coordinating work processes
                    
          - Goals
            - aligns your team to what you strive to attain

            Samples:
              Google:
                - OKRs
                  - objectives
                  - key results
                  - idea of OKRs is to set very ambitious goals
                    - enable you to accombplish more than the team thought was possible
                    - encourage to try new things
                    - prioritize work
                    - learn from both successes and failures

      2. Determine what collaboration/Communication looks like
        - high priority for SREs
        - common approaches to platforms
        - focus on problem-solving

        Practices
          1. Service-oriented meetings(Comm)
            - team review the state of service 
              - to increase awarenes, involvement and and improve operations
            - weekly 30-60 minutes
            - designated lead
            - compulsory attendance
            - set agenda

          2. Have a good team composition roles(Comm)
            - Tech lead
              - who sets the technical direction of the team
            - Manager
              - who runs performance management
            - Project Manager
              - who comments on a design doc and writes code

          Notes:
            SREs
              - make recommendation about architecture and software behaviors
              - adept at performing more than one job function and have the skills to step into another is needed
              
      3. Share knowledge among teams/Knowdlege sharing
          - cultivates knowledge sharing among its team members

          Ways/Practices
            1. Cross-training
              - a key competency when hiring SRE
              - involves training employee for flexible response to chaning production schedules
              - trains team memebers to be flexible
                - train employee other job role other than his hired role scope
              - helps reduce costs
              - improves morale
              - reduces turnover
              - boosts productivity
              - enhances scheduling flexibility
              - increases job satisfaction

            2. Employee-to-employee network
              - employees can develop adn grow by teaching others

              Sample
                - Google does this with g2g
                  - volunteer teaching network
                    - teaching courses
                    - 1 to 1 mentoring
                    - designing learning materials

              3. Job shadowing
                - expose new hires to what others in the team do every daily
                - expert knowledge and exposure to teammates
                - hands-on experience
                - opportunity to ask questions
                - introduction to the concept of gradual change
                - way to spot opportunity for cross-functional collaboration
                - way to understand the nuances of a particular job role
                - psychologically sage environments
                - way to pair up your team memebers to scale and retain knowledge

    Notes
      - Postmortems are SRE practice to help you learn from mistakes
      - Collaboration and knowledge sharing fosters delivering postmortems

    Benefits of collaboration technology
      - Real-time collaboration
      - open commenting system
      - email notifications

    Germany Online Solutions Provider
      - reduce number of comm channels
      - descibe channles used for what purpose
      - tech that collaborate in real-time directly via comments or chat
      - use collaborative tools to creat SRE knowledge repo

  Quiz 
    1. What is one value SRE provides to an IT team?
      - Developers are enabled to work at a higher velocity while maintaining reliability.
        - 
    2. What are Site Reliability Engineers comfortable with?
      - Failure
    
    3. What is a reasonable degree of target reliability for an SLO?
      - 99.9%
        - 99.9% is a reasonable target for reliability as it is just short of 100% and still leaves room to focus on feature development.

    4. What can happen when team members don't feel psychologically safe?
      - Moments of learning are lost.
        - ple don’t speak up or ask questions in work environments with low psychological safety, therefore moments of learning are inevitably lost.

    5. What is your team's clear and compelling goal that it strives to achieve?
      - Mission

    Key Points
      - DevOps emerged to help close gaps and break down silos bet development and operations teams
      - DevOps is a philosopy, not a development methodology or technology
      - SRE is a practical way to implement DevOps philosophy
      - Developers focus on feature vlocity and innovation; operators focus on reliability and consistency
      - SRE consists of both technical and cultural Practices
      - SRE practices align to DevOps pillars:
        1. Reduce Organizational silos
          - Share ownership
        2. Accept failure as normal
          - Blamelessness
        3. Implement gradual changes
          - Reduce cost of failure
        4. Leverage tooling and automation
          - Toil Automation
        5. Measure everything
          - Measure toil and reliability


Module 4: Make Tomorrow Better than today
  - Continuous, gradual testing as well as automation are very important in SRE culture. 
  This module covers the SRE technical concepts of continuous integration, continuous delivery, 
  and canarying as they relate to the DevOps pillar of implementing...

  Learning Objectives
    1. Describe the technical fundamentals of SRE: 
      - CI/CD, 
      - canarying, and 
      - toil automation
    2. Describe the cultural fundamentals of SRE: 
      - Design thinking
      - prototyping
      - psychology of change, and 
      - resistance to change

  Continuous integration, delivery and canarying
    Developers
      - moonshot thinking
        - implment massive software changes that have a high likelihood of failing

    SRE 
      - gradual change
        - smalle changes that have less impact on users if they fail

    CI/CD
      CI
        - building, integrating and testing code w/in dev environment
      
      CD
        - deploying to production frequently, 
        or at the rate the business chooses

      Processes
        1. Code
        2. build
        3. Integrate
        4. Test
        5. Release
        6. deploy
        7. operate

      Benefits
        1. Helps to overcome agile transformation challenges
        2. can min code integrations headaches
        3. reduces human error
        4. promotes higher code quality
        5. easier to "recover" after soemthing goes wrong
        6. can automate everything, which saves time and money
        7. provides visibility on project completion
        8. time to market is shorter
        9. provides you w/ more metrics to review and act on

    Canarying
      - advance warning of danger
        - small thing detects danger as we go into the unknown
      - deploying change in service to a group of users who don't know they are 
      receiving the cahnge, evaluating the impact to that group,
      then deciding how to proceed.

      Canarying requirements
        1. Canary population should be large enough to be a rep subset of the control
        The only diff should be the production change.

        2. Canary population should be small enough not to endanger the whole service if broken
        
        3. Canary should not be overly complicated for those who monitor it

  Design Thinking and prototyping
    Design Thinking
      - combines creativity and structure to solve complex problems
      - teach teams and individuals to thingking creatively for innovation

      5 phases
        1. Emphatize
          - observe and engae w/ intended users
          - immerse in their environments
        
        2. Define the problem you are attempting to solve
          - express the problem in the point of view of the users

        3. Ideate    
          - generate ideas for Solutions

        4. Time prototype
          - ideas into real world
            - identify best possible solution before communicating
        
        5. Test
          - test prototype in real world setting w/ your intended users

      Software Dev approach
        1. focus on user
        
        2. 10x thinking

        3. prototype to test your solution

    Prototyping 
      Benefits
        - more ideas are tested
        - faster failures means more successes

      Ways to prototype
        1. physical prototypinh
        2. paper and drawing
        3. clickable
        4. Role play
        5. video

      Sample  
        - video panel of discussion
        - heat map
        - banner w/ posted Notes

      Real life Sample
        - use design thinking methodology
          - branstorm about changes to their production processes
          
        prototype
          - use diff color of cups rep each step in teh process needed to be improved or depracted

  Toil Automation
    - if  a human operator need to touch your machine system during normal operations
    means you have a bug. The definiotion of normal changes as your sys grows
    - focus on development rather than operational work/toil
      - SREs eliminate toil by automating it.
     
    Notes
      - DevOps philosophy
        - leverage tooling and automation

    Toil
      - work I don't like to do
      - manual
      - repetitive
      - automatable
      - tactical
      - w/o enduring enduring value
      - scales linearly as the service grows
      - admin work that is not necessary or volatile

    Excessive toil
      1. Career stagnation

      2. Low morale

      3. Confusion

      4. Slow progress

      5. Sets Precedence

      6. Promotes attrition

      7. Breach of faith

    Value of automation
      1. Consistency

      2. A platform
        - provides a way to centralize mistakes so bug is fixed once in one place

      3. Quicker resolutions
        - automated syst looks for problems as soon as they arise

      4. Faster action

      5. Time saved 
        - no need for continual trainin of humnas in maintenance of process

  Psychology of change
    Four Categories
      1. Navigators
        - make teams and business successful
          - help you succeed
       
        - as leaders
          - celebrate their behaviors
          - use them as champions for the change

      2. Critics
        - have passion and energy
        - have valid fears

        - as leaders
          - spend time w/ them
            - powerful advocates if you can persuade them

      3. Victims
        - need to express emotions
        - take change personally

        - as leaders
          - listen to and empathize w/ them
            - they will start to listen once they feel heard

      4. bystanders
        - are difficult to understand
        - do not know what's going on
        - continue w/ normal routine

        - as leaders
          - communicate w/ them
          - ascertain their feelings

    How brain response?
      1. Anterior Cingulate
        - exclusion
        - physical pain

        Soln:
          - involve poeple in the change

      2. Prefrontanal cortex
        - realization
        - deception
        - heightened anxiety

        Soln:
          - set realistic expectaations

      3. Rush of adrenaline
        - problem-solving
        - positivity

        Soln:
          Identify opportunities for co-creation and provide coaching instead of soln

      4. amygdala
        - unfamiliar concepts
        - anxiety
        - depression
        - fatigue
        - anger

        Soln:
          - simplify messaging and focus on key concepts per user group

      5. Greater attention density
        - adaptation

        Soln:
          - ensure that comm are engaing and training is interactive

      6. Basal ganglia 
        - Habitual tasks
        - comfort
        - hard-wired

        Soln:
          - allow people time to build new habits

    Emotional respionse to change
      1. Denial
        - indifferent
        - passive
        - guarded

      2. resistance
        - angry
        - hostile
        - disagrees w/ feedback
        - withdrawn

      3. acceptance
        - conscious incompentence
        - aware
        - confused
        - guilty
        - worried

      4. exploration
        - conscious competence
        - open
        - questioning
        - accepts feedback

      5. commitment
        - unconscious competence
        - energized
        - confident
        - takes ownership

      6. Growth
        - self evaluates
        - take risks
        - seeks feedback
        - experiments

    Connect w/ individuals on 3 levels
      1. head
        - rational
          - talk about why the change is happening
            - strategic mission, vision and raionlae behind it.

      2. heart
        - emotional
          - why people should care
          - remember people can be ego and self motivated
          - address how the change will affect them personally in their day to day role
          - how it will impact them positively
          - make them feel inclusive for a bigger picture

      3. feet
        - behavioral
        - talk anbout knowledge, skills and resources you will provide to make sure they're successful in this change
        - Teams need support to make sure they are and feel competent when asked to change what they know.
    
    Handling Resistance to Change
      - Are all your leaders and managers role modeling the new processes and behaviors?
      - Do people understand the reason for the change?
      - Do people care about the change being successful?
      - Do people have the knowledge and ability to be successful in your new world?
      - Are the right reinforcement and recognition programs in place?
  
  Quiz
    1. What is a benefit of continuous integration and continuous delivery (CI/CD)?
      - It is less disruptive for customers.
        - CI/CD is a way to implement gradual change so it is less disruptive to customers.

    2. What would be the best way to practice canarying?
      - Deploy a small feature change to users that are a representative subset of your typical customers.

    3. Why is toil a problem?
      - It becomes toxic in large quantities.
        - Toil becomes a problem and is toxic when it occurs in large quantities, as it takes SRE’s time away from real project work.

    4. Which is the third phase of design thinking?
      - Ideate

    5. What should you present change to your team members as?
      -  An opportunity
        - Since resistance to change is usually a fear of loss, presenting change as an opportunity helps motivate employees to embrace and accept it.

  Glossary
    1.Continuous integration
      - Building, integrating, and testing code within the development environment.
    
    2. Continuous delivery
      - Deploying to production frequently, or at the rate the business chooses.
    
    3. Canarying
      - Deploying a change in service to a group of users who don’t know they are receiving the change, evaluating the impact to
        that group, and then deciding how to proceed.
    
    4. Toil
      - Work directly tied to a service that is manual, repetitive, 
      automatable, tactical, or without enduring value, or that scales
      linearly as the service grows. 

  Key Points
    - change is best when small and frequent
    - design thinking methodology 5 phases:
      - Emphatize
      - define
      - Ideate
      - prototype
      - test
    - prototyping culture
      - encourages teams to try more ideas
      - leading to increase faster failures
        - more successes
    - excessive toil is toxic to the SRE role
    - eliminating Toil  
      - SRE can focus on work that either:
        - reduce future toil
        - add service feautures
    - resistance to change is usually a fear of loss
    - present change as an oppportunity, not a threat
    - people react to change in many ways
      - IT leaders need to understand how to communicate w/ and support each group

Regulate Workload
  - In this module, you'll learn about SRE practices around measuring everything,
   specifically reliability and toil, and the concept of monitoring. 
   We’ll also cover the cultural fundamentals of goal-setting, transparency, 
   and data-driven decision making.

  Learning Objectives
    1. Describe the technical fundamentals of SRE: Measure toil and reliability, and monitoring
    2. Describe the cultural fundamentals of SRE: Goal setting, tansparency, and data-based decision making

  Toil and reliability
    DevOps Last pillar
      - Measure Everything

      Goal of measuring everything:
        - IT and the business can understand the current status of the service
        - IT can analyze the data and identify necessary actions to improve the status
        - IT can make better decisions and impact across the organization

      Notes
        - You can't improve what you don't measure

    SRE counterparts
      1. Measure Everything
        1. Measuring reliability
           - Error budget 
              - is what you deem an acceptable level of unreliability that you can allocate other engineering work to. 
              Product and engineering teams decide what the reliability target is together. 
              Engineering teams inform the target, 
              while product management defines it. 
              This is not really a technical decision, but instead is defined by customer expectations, the competitive landscape, and the position you have in the market. 

            - An SLI 
              - is a quantifiable measure of a single aspect of service reliability that ideally has a close linear relationship with your users’ experience with your service. 

            - An SLO 
              - combines an SLI with a target reliability—that is, it’s the threshold that, if crossed, turns happy customers into unhappy customers.
  
        2. Measuring toil
          1. Identify it
            -  by stakeholders
          2. Select an appropriate unit of measure
            - minutes and hours
          3. Track the measurements continuously
            - before, during and after toil reduction efforts

          Notes
            - streamline with tools or scripts
            - start simple
              - count tickets
              - count alerts
              - collect statistics

          Benefits of measuring toil
            - Triggers a toil reduction efforts
            - Empowers teams to think about toil
            - growth in engineering project work over time, some of which will further reduce toil
            - increased team morale and decreased team attrition and burnout
            - less context switching for interruptions, which raises team productivity
            - increased process clarity and standardization
            - enhanced technical skills and career growth for team members
            - reduced training time
            - fewer outages attributable to human errors
            - imporved security
            - shorter response times for user requests

        3. Monitoring
          - allows visibility into a system

          What to monitor>
            - symptoms, rather than causes
            - error budget burn
            - capacity alerts are an exception
            - Four golden signals
              1. Latency
              2. Traffics
              3. Error
              4. Saturation

          Notes:
            - escalate if risk dropping below SLO for the month

  2. Goal setting
    - look for KPIs
      - who
      - what to measure
      - how to measure
    
    Sample
      - Google uses OKRs as KPIs graded from 0.0 to 1.0

      OKR grading considerations
        - 60-70% is a good score.
        - OKRs are not synonymous with performance
        - Organizational OKRs are graded publicly
        - Frequent check-ins throuput the quarter help maintain progress

  3. Transparency
    - only way to demonstrate to your employees that you beleive they are trustworthy adults
    and have good judgement
    and giving them more context about what is happening(and how, and why)
    will enable them to do their jovs more effectively.
    - demonstrate trustworthy good judgement about what is happening effectively.
    
    How>
      1. Sharing Monitoring tools
          - Buganizer
      2. Sharing Communications
      3. Feedback loop
        - measure
        - improve
        - produce

4. Data-Driven Decision Making
  - Remove unconscious bias
  - refer to glossary for four bias meanings

  How?
    - Question your first impressions.
    - Justify decisions.
    - Make decisions collectively.

  Quiz  
    1. SLIs need to provide a clear definition of what? 
      - Good and bad events
        - SLIs need to provide a clear definition of good and bad events that will correlate with your users’ experience with the service.

      - Total user interactions
        - factor when quantifying SLOs.

    2. What does monitoring allow for?
      - Visibility into a system

    3. What does Google use OKRs as?
      - KPIs

    4. Which bias is the tendency to find information, input, or data that supports your preconceived notions?
      - Confirmation bias

  Glossary  
    1. Affinity bias
      - Tendency to gravitate toward those who are similar to you, 
      such as with race, gender, socioeconomic background, or education level.

    2. Confirmation bias
      - Tendency to find information, input, or data that supports 
      your preconceived notions.
      
    3. Selective attention bias
      - Tendency to pay attention to things, ideas, and 
      input from people whom you tend to gravitate toward.

    4. Labeling bias
      - Tendency to form opinions based on how people look,  
      dress, or appear externally
  
  Key Points
    1. measure reliability w/ good service level indicators(SLIs)
    
    2. a good SLi correlates w/ user exp w/ your service; that is good SLi
    tells you when users are happy or unhappy

    3. measure toil by indetifiying it, selecting and appropriate unit of
    measure, and tracking the measurements continuously

    4. Goal-setting, transparency, and data-driven decision making are key components
    of SRE measurement culture

    5. To make truly data-driven decisions, you need to remove any unconscious biases


Apply SRE on your organization
  - In this module, we will talk about ways you can assess and understand your organization’s maturity and readiness for adopting SRE principles, practices, and culture
  We’ll also discuss the types of skills to look for in hiring new SREs and how to...

  Learning Objectives
    1. Assess organizational maturity for SRE
    2. Identify where SRE can be applied within a business
    3. Recognize the skills an SRE needs
    4. Articulate the different types of SRE team implementations
    5. Advocate for SRE culture adoption across the organization
    6. Necessary SRE skills
    7. How to train your workforce
    8. SRE team implementations
    9. How Google Clou can support your organization

  SRE Steps
    1. SLOs w/ Consequences
    2. Make tomorrow better than today
    3. Regulate workload

  Organizational maturity
    Low
      - no adopted SRE
        - principles
        - practices
        - culture

    High
      - well established SRE team
      - widely embraced principles, practices and culture

    Signals/Principles
      1. well-documented and user-centric SLOs
      2. Error budgets
      3. blameless postmortem culture
      4. low toleraance for toil

    technical
      1. Blameless postmortems
        SLOs
        Error Budgets
      2. CI/CD
        Canarying
        Toil Automation
      3. Reliability measurement
        Toil measurement
        Monitoring

    Cultural
      1. Psychological safety 
        Share vision and knowledge
        Foster collaboration

      2. Design thinking
        Prototyping
        Change management

      3. Goal-setting
        Transparency
        Data-driven decision making

    DORA DevOps Quick Check tool
      - five question assessment about your current engineering practices

  Skills and training
    What skills to train and hire?
      - operations software engineering
      - monitoring systems
      - production automation
      - system architecture
      - troubleshooting
      - culture of trust
      - incident management
        - technical troubleshooting
        - communication framework
      - Character traits
        - resilience 
        - flexibility

      Notes
        - SREs
          - provide right balance between enabling product dev and doing what's
          right for your customers.

  SRE teams implementations
    1. Kitchen Sink/Everything SRE
      - scope is unbounded
      - good starting point for first SRE team
      - recommended for org w/ few app and user journeys
      - useful when dedicated SRE team is needed

      Benefits
        - there are no coverage gaps
        - it is easy to spot patterns and similarities bet services and projects
        - acts as glue bet teams
      
      Disadvatages
        - lacks a team charter
        - risks overloading the team
        - can run the risk of shallow contributions
        - team issues can have a negative impact on the business

    2. Infrastructure
      - focus on behind the scenes tasks
      - helps make other team's jobs easier
      - maintains shared services related to infra
      - recommended for org w/ multiple dev teams
      - defines common standards for the IT team
      
      Benefits
        - allows dev to use devops practices w/o divergence across business
        - keeps its focus on highly reliable infra
        - defines production standards

      Disadvantages
        - possible neg impact to business folowwing team issues
        - improvement the team makes may not be tied to customer experience
        - may require teams to be split, which can lead to duplication or divergence of practices   

    3. Tools
      - focuses on building software to help dev w/ aspects of SRE work
        - capacity planning
      - recommended for org that need highly specialized reliability-related tooling

      Benefits
        - allows dev to use devops practices w/o divergence across business
        - keeps its focus on highly specialized reliability-related tooling
        - defines production standards

       Disadvantages
        - could unintentionalluy turn into an infra team
        - risk of increased toil and overall worload on the team

    4. Product/Application
      - improves the reliability of critical app/business area
      - recommended for org that have kitchen sink, infra or tools SRE team
      and app w/ high reliability needs

      Benefits
        - provides clear focus
        - creates clear link bet business priorities and team effort expenditure

      Disadvantages
        - require establishing new teams as business and complexity grow
        - lead to duplication of infra dn divergence of practices

    5. Embedded
      - SREs embedded w/ developers
      - SREs and dev have a project or time-bounded relationship
      - hands-on, changing code and config of services
      - recommended for org to start a team or scale another implementation
      - can augment the impact of a tools or infra team

      Benefits
        - focused expertise directed to specific problems or teams
        - allows side-by-side demo of SRE practices

      Disadvantages
        - can cause a lack of standardization bet teams
        - can lead to divergence in practice
        - less time for mentoring

    6. Consulting
      - similar to embedded team
      - less hands-on
      - may write code and maintain tools for themselves and dev
      - not recommended untul org complexity is large
      - recommends one to two part-time consulting SREs before the first SRE team

      Benefits
        - help w/ scaling of an existing SRE team's positive impact
        - decoupled from directly changing code and config

      Disadvantages
        - may lack sufficient context to offer useful advice
        - can be perceived as hands-off
    
  Getting started
    Request Google Cloud's Professional Services Consultation
      - reach out to your Account Director/Executive to request a Google Professional Services consultaion.

  Quiz
    1. What practice does Google recommend that you establish before forming your first SRE team?
      - Blameless postmortem culture
        - one practice that Google recommends your organization establishes before forming your first SRE team.

      - Continuous integration/continuous delivery
        - CI/CD does not need to be established before forming your first SRE team.

    2. Which type of IT role does Google recommend as a possible new SRE hire?
      - Systems administrator
        - Google recommends systems administrators as good first new SRE hires because of their experience 
          - working IT operations 
          - and managing production systems.

    3. Scope is generally unbounded for which type of SRE implementation?
      - Kitchen Sink
        - Scope is usually unbounded for Kitchen Sink/”Everything SRE” teams.
    
    4. Which Google team can support you in jumpstarting your SRE implementation?
      - Google Cloud Professional Services team
        - can help customers jumpstart their SRE implementations.

  Key Points
    1. Kitchen Sink/"Everything SRE" team
      - recommended for org that have few app and user journeys
      - scope is mall enough that one team is necessary
      - dedicated SRE tram i needed in order to implement practices

    2. Infrastructure team
      - focuses on maintaining shared services and components related to Infrastructure
      - versus SRE team dedicated to working on services related to products like customer-facing code

    3. Tools team
      - focus on building software to help their dev counterparts:
        - measure
        - maintaing
        - improve sys reliability or other aspects of SRE work such as capacity/planning

    4. Product/App team
      - works to improve reliability of critical app or business area
      - recommended for org that already have kictchen sink, infra, tools-focused SRE team
        - have key iser-facing app w/ high reliability needs

    5. Embedded team
      - has SREs embedded w/ their developer counterparts
        - usually one per developer team in scope
      - work relationship bet embedded SREs and dev tend s to be project or time-bounded
      - usually very hands-on
        - perform work like 
          - changing code
          - configuration of the services in scope

    6. Consulting team
      - similar to Embedded
      - except SRE are usually hands-on
      - recommended staffing one or two-part-time consultants before you
      staff your first SRE team.

    7. org w/ high SRE maturity have:
      - well-documented
      - user-centric SLOs,
      - error budgets
      - blameless postmortem culture
      - low tolerance for toil

    8. Engineers w/ operations exp and sys admin w/ scripting exp
      - good first SREs to hire

    9. Upskill current team members w/ necessary SRE skills such as:
      - operations and software engineering
      - monitoring sys
      - production automation
      - sys architecture
      - troubleshooting
      - culture of trust
      - incident mngmt

    10. Conduct your acct exec or acct dir to learn:
      - how the google cloud prof services team can support org adoption of SRE


Final Assessment
  - Test your overall knowledge of Google SRE technical and cultural practices with this summative quiz. You must score an 80% to pass. 
  This assessment is required in order to receive your course completion certificate.

  Learning Objectives
    1. Assess SRE technical and cultural fundamentals knowledge

  Final Assessment
    1.Generally, whose experience with a production service determines its availability?
      - The customer’s
      
      - The SRE's

      - The operator’s
    
    2.Which is the term that describes breaking down the silos and closing gaps between development and operations teams?
      - DevOps

      - Site Reliability Engineering
   
    3.Which DevOps pillar led to Google SRE practices, such as SLOs and error budgets, that promote shared 
ownership between developers and SREs?
      - Reduce organizational silos
        - is the DevOps pillar that led to SRE practices like SLOs and error budgets which promote shared ownership between developers and SREs.

    4.Your developers have felt inundated with too many manual and repetitive tasks that are tied to the production service. What is this called?
      - Toil
        - Toil is work that is mundane, repetitive, without enduring value, automatable, and scales linearly as the service grows.

    5.What does a blameless postmortem not help with?
      - Decreasing engineering costs incurred after launch
        - Blameless postmortems and its culture do not correlate with decrease in engineering costs incurred after launch.

      - Ensuring that all the root causes are properly understood by the team
      - Avoiding multiplying complexity
      - Reducing the likelihood of stressful outages

    6.What can you build with your team by acknowledging your own fallibility as a leader?
      - Psychological safety
        - Acknowledging your own fallibility is one way to build psychological safety with your teams.

    7.What is a service-level objective (SLO)?
      - A precise numerical target for system reliability.
        - An SLO is a precise numerical target for system reliability.

    8.What often accompanies toil automation that leaders should be prepared for?
      - Resistance to change

      - Linear scaling of work with complexity

    9.Your team members are unsure what goals they are trying to achieve within the team. 
    What part of your team vision should you work to clarify?
      - The mission
        - Your team’s mission is the goals it strives to achieve.

    10.SREs believe that change is best when what?
      - Small and frequent

      - Small and dispersed

    11.What is continuous delivery?
      - Deploying to production frequently, or at the rate the business chooses.

      - Building, integrating, and testing code within the development environment.

    12.What are the five steps in design thinking methodology?
      - Empathize, Define, Ideate, Prototype, Test
        - The five phases of design thinking are Empathize, Define, Ideate, Prototype, and Test.

      - Define, Ideate, Prototype, Test, Resolve

    13.Why should toil be limited to a bounded part of the SRE role?
      - It prevents SREs from doing only sysadmin work.
        - Keeping toil limited to a bounded part of the SRE role prevents SREs from solely doing system admin work.

      - It frees SREs to completely focus on reliability work.

    14.You've decided to adopt SRE practices and culture in your company. 
    As change begins to happen, you notice that Naveen, 
    one of your operations managers is avoiding new protocols and 
    continuing with his normal work routine. 
    In which group of people would you categorize Naveen?
      - Bystander
        -  tend to ignore change and continue on with their normal routine as though change is not happening.

    15.What is one benefit of measuring toil?
      - It triggers a reduction effort.
        - When teams are able to see how much toil they have, they focus on reducing it.

    16.What does Google recommend you do with the four golden signals?
      - Monitor the system
        - Google recommends you monitor the system using the four golden signals—latency, traffic, errors, and saturation,

    17.What do OKRs primarily help an organization do?
      - Set goals
        - are KPIs that help organizations set goals.

    18.Which phase of the SRE journey includes automating toil?
      - Make Tomorrow Better than Today
        - includes toil automation.

    19.SREs are regularly on-call and required to solve problems fast. What is a primary skill SREs need for this?
      - Troubleshooting
        - SREs are regularly on-call, they require excellent troubleshooting skills in order to diagnose and solve problems fast.

    20. Which type of SRE team implementation does Google recommend for an organization's first SRE team?
      - Kitchen Sink

  Learner Workbook

  Resources
    
    Site Reliability Engineering: Measuring and Managing Reliability coursera lessons
      https://www.coursera.org/learn/site-reliability-engineering-slos

    Google cloud consulting services
      https://cloud.google.com/consulting/?utm_source=google&utm_medium=cpc&utm_campaign=emea-gb-all-en-dr-bkws-all-solutions-trial-e-gcp-1008073&utm_content=text-ad-none-any-DEV_c-CRE_340468586137-ADGP_Hybrid+%7C+AW+SEM+%7C+BKWS+~+EXA_1:1_EMEA_EN_VM+migration_gcp+professional+services-KWID_43700042357065337-kwd-380758056939-userloc_1006886&utm_term=KW_gcp+professional+servicesg&ds_rl=1242853&ds_rl=1245734&ds_rl=1245734&gclid=Cj0KCQjw9ZzzBRCKARIsANwXaeIPLV6niFcKgzkeOSZH5z6fj95vu61t48KjkwKY_Q1gXJY7_mUVCXcaAvN9EALw_wcB&hl=en
    
    SRE workbook
      https://sre.google/workbook/table-of-contents/
    
    SRE table of contents
      https://sre.google/sre-book/table-of-contents/





























